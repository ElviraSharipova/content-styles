{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar UnityLoaderService =\n/** @class */\nfunction () {\n  function UnityLoaderService() {\n    /**\n     * A reference to the document head.\n     * @type {HTMLHeadElement}\n     */\n    this.documentHead = document.querySelector(\"head\");\n  }\n  /**\n   * Appends the Unity loader script to the window. When a version of the loader\n   * is already appended, we'll skip right away. When another loader is try to\n   * append, the previous will be removed first.\n   * @param {string} url the path to the Unity loader file\n   * @param {Function} onLoad when the script is loaded\n   * @returns A promise when resolving when the file is loaded.\n   */\n\n\n  UnityLoaderService.prototype.load = function (url) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      if (typeof _this.unityLoaderScript !== \"undefined\") if (url === _this.unityLoaderScript.src) {\n        return resolve();\n      } else {\n        _this.unityLoaderScript.remove();\n      }\n      _this.unityLoaderScript = document.createElement(\"script\");\n      _this.unityLoaderScript.type = \"text/javascript\";\n      _this.unityLoaderScript.async = true;\n      _this.unityLoaderScript.src = url;\n\n      _this.unityLoaderScript.onload = function () {\n        return resolve();\n      };\n\n      _this.unityLoaderScript.onerror = function () {\n        return reject(\"Unable to load \" + url);\n      };\n\n      _this.documentHead.appendChild(_this.unityLoaderScript);\n    });\n  };\n\n  return UnityLoaderService;\n}();\n\nexports.default = UnityLoaderService;","map":null,"metadata":{},"sourceType":"script"}