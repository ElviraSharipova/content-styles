{"ast":null,"code":"var _jsxFileName = \"/home/dekor/eqvium/react_material_test/admin-full/src/pages/charts/LineCharts.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/styles\";\nimport ReactApexChart from \"react-apexcharts\";\nimport ApexCharts from \"apexcharts\"; // components\n\nimport Widget from \"../../components/Widget/Widget\"; //Realtime chart\n\nvar lastDate = 0;\nvar data = [];\nvar TICKINTERVAL = 86400000;\nlet XAXISRANGE = 777600000;\n\nlet _isMounted;\n\nfunction getDayWiseTimeSeries(baseval, count, yrange) {\n  var i = 0;\n\n  while (i < count) {\n    var x = baseval;\n    var y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n    data.push({\n      x,\n      y\n    });\n    lastDate = baseval;\n    baseval += TICKINTERVAL;\n    i++;\n  }\n}\n\nfunction intervals() {\n  if (_isMounted) {\n    window.setInterval(() => {\n      getNewSeries(lastDate, {\n        min: 10,\n        max: 90\n      });\n      ApexCharts.exec(\"realtime\", \"updateSeries\", [{\n        data: data\n      }]);\n    }, 1000);\n  }\n}\n\ngetDayWiseTimeSeries(new Date(\"11 Feb 2019 GMT\").getTime(), 10, {\n  min: 10,\n  max: 90\n});\n\nfunction getNewSeries(baseval, yrange) {\n  var newDate = baseval + TICKINTERVAL;\n  lastDate = newDate;\n\n  for (var i = 0; i < data.length - 10; i++) {\n    // IMPORTANT\n    // we reset the x and y of the data which is out of drawing area\n    // to prevent memory leaks\n    data[i].x = newDate - XAXISRANGE - TICKINTERVAL;\n    data[i].y = 0;\n  }\n\n  data.push({\n    y: Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min\n  });\n} //Zoomable Timeseries\n\n\nvar ts2 = 1484418600000;\nvar dates = [];\n\nfor (var i = 0; i < 120; i++) {\n  ts2 = ts2 + 86400000;\n  var innerArr = [ts2, Math.round(Math.random(0) * 100)];\n  dates.push(innerArr);\n}\n\nconst themeOptions = theme => {\n  return {\n    // first container chart\n    grid: {\n      row: {\n        colors: [theme.palette.primary.light, \"transparent\"],\n        // takes an array which will be repeated on columns\n        opacity: 0.1\n      }\n    },\n    colors: [theme.palette.primary.main],\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      curve: \"smooth\"\n    },\n    chart: {\n      toolbar: {\n        show: false\n      }\n    },\n    legend: {\n      show: false\n    },\n    // fourth chart container\n    options3: {\n      colors: [theme.palette.primary.light],\n      chart: {\n        id: \"realtime\",\n        animations: {\n          enabled: true,\n          easing: \"linear\",\n          dynamicAnimation: {\n            speed: 1000\n          }\n        },\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        curve: \"smooth\"\n      },\n      markers: {\n        size: 0\n      },\n      yaxis: {\n        max: 300\n      },\n      legend: {\n        show: false\n      }\n    }\n  };\n};\n\nconst values = {\n  series4: [{\n    data: data1\n  }]\n};\nexport default function Charts(props) {\n  useEffect(() => {\n    intervals();\n    return function cleanup() {\n      _isMounted = false;\n      data = data.slice(data.length - 10, data.length);\n    };\n  });\n  const [isPaused, setPause] = useState(false);\n  const ws = useRef(null);\n  const [data1] = useState([0, 0, 0, 0, 0]);\n  useEffect(() => {\n    ws.current = new WebSocket(\"ws://79.143.25.41:8080/gear\");\n\n    ws.current.onopen = () => console.log(\"ws opened\");\n\n    ws.current.onclose = () => console.log(\"ws closed\");\n\n    return () => {\n      ws.current.close();\n    };\n  }, []);\n  useEffect(() => {\n    if (!ws.current) return;\n\n    ws.current.onmessage = e => {\n      if (isPaused) return; //const message = JSON.parse(e.data);\n\n      console.log(\"e\", e.data);\n      let array1 = [...data1, e.data];\n      array1.shift();\n    };\n  }, [isPaused, data1]);\n  const theme = useTheme();\n  const [state] = useState(values); // local\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Widget, {\n    title: \"Dynamic Updating Chart\",\n    noBodyPadding: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ReactApexChart, {\n    options: themeOptions(theme).options3,\n    series: state.series4,\n    type: \"line\",\n    height: \"350\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }\n  })))));\n}","map":{"version":3,"sources":["/home/dekor/eqvium/react_material_test/admin-full/src/pages/charts/LineCharts.js"],"names":["React","useState","useEffect","useRef","Grid","useTheme","ReactApexChart","ApexCharts","Widget","lastDate","data","TICKINTERVAL","XAXISRANGE","_isMounted","getDayWiseTimeSeries","baseval","count","yrange","i","x","y","Math","floor","random","max","min","push","intervals","window","setInterval","getNewSeries","exec","Date","getTime","newDate","length","ts2","dates","innerArr","round","themeOptions","theme","grid","row","colors","palette","primary","light","opacity","main","dataLabels","enabled","stroke","curve","chart","toolbar","show","legend","options3","id","animations","easing","dynamicAnimation","speed","zoom","markers","size","yaxis","values","series4","data1","Charts","props","cleanup","slice","isPaused","setPause","ws","current","WebSocket","onopen","console","log","onclose","close","onmessage","e","array1","shift","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/styles\";\nimport ReactApexChart from \"react-apexcharts\";\nimport ApexCharts from \"apexcharts\";\n\n// components\nimport Widget from \"../../components/Widget/Widget\";\n\n//Realtime chart\nvar lastDate = 0;\nvar data = [];\nvar TICKINTERVAL = 86400000;\nlet XAXISRANGE = 777600000;\nlet _isMounted;\nfunction getDayWiseTimeSeries(baseval, count, yrange) {\n  var i = 0;\n  while (i < count) {\n    var x = baseval;\n    var y =\n      Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n\n    data.push({\n      x,\n      y\n    });\n    lastDate = baseval;\n    baseval += TICKINTERVAL;\n    i++;\n  }\n}\n\nfunction intervals() {\n  if (_isMounted) {\n    window.setInterval(() => {\n      getNewSeries(lastDate, {\n        min: 10,\n        max: 90\n      });\n\n      ApexCharts.exec(\"realtime\", \"updateSeries\", [\n        {\n          data: data\n        }\n      ]);\n    }, 1000);\n  }\n}\n\ngetDayWiseTimeSeries(new Date(\"11 Feb 2019 GMT\").getTime(), 10, {\n  min: 10,\n  max: 90\n});\n\nfunction getNewSeries(baseval, yrange) {\n  var newDate = baseval + TICKINTERVAL;\n  lastDate = newDate;\n\n  for (var i = 0; i < data.length - 10; i++) {\n    // IMPORTANT\n    // we reset the x and y of the data which is out of drawing area\n    // to prevent memory leaks\n    data[i].x = newDate - XAXISRANGE - TICKINTERVAL;\n    data[i].y = 0;\n  }\n\n  data.push({\n    y: Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min\n  });\n}\n\n//Zoomable Timeseries\nvar ts2 = 1484418600000;\nvar dates = [];\nfor (var i = 0; i < 120; i++) {\n  ts2 = ts2 + 86400000;\n  var innerArr = [ts2, Math.round(Math.random(0) * 100)];\n  dates.push(innerArr);\n}\n\nconst themeOptions = theme => {\n  return {\n    // first container chart\n    grid: {\n      row: {\n        colors: [theme.palette.primary.light, \"transparent\"], // takes an array which will be repeated on columns\n        opacity: 0.1\n      }\n    },\n    colors: [theme.palette.primary.main],\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      curve: \"smooth\"\n    },\n    chart: {\n      toolbar: {\n        show: false\n      }\n    },\n    legend: {\n      show: false\n    },\n    // fourth chart container\n    options3: {\n      colors: [theme.palette.primary.light],\n      chart: {\n        id: \"realtime\",\n        animations: {\n          enabled: true,\n          easing: \"linear\",\n          dynamicAnimation: {\n            speed: 1000\n          }\n        },\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        curve: \"smooth\"\n      },\n      markers: {\n        size: 0\n      },\n      yaxis: {\n        max: 300\n      },\n      legend: {\n        show: false\n      }\n    }\n  };\n};\n\nconst values = {\n  series4: [\n    {\n      data: data1\n    }\n  ]\n};\n\nexport default function Charts(props) {\n  useEffect(() => {\n    intervals();\n    return function cleanup() {\n      _isMounted = false;\n      data = data.slice(data.length - 10, data.length);\n    };\n  });\n\n  const [isPaused, setPause] = useState(false);\n  const ws = useRef(null);\n  const [data1] = useState([0,0,0,0,0]);\n  \n  useEffect(() => {\n        ws.current = new WebSocket(\"ws://79.143.25.41:8080/gear\");\n        ws.current.onopen = () => console.log(\"ws opened\");\n        ws.current.onclose = () => console.log(\"ws closed\");\n\n        return () => {\n            ws.current.close();\n        };\n    }, []);\n\n    useEffect(() => {\n        if (!ws.current) return;\n\n        ws.current.onmessage = e => {\n            if (isPaused) return;\n            //const message = JSON.parse(e.data);\n            console.log(\"e\", e.data);\n            let array1 = [...data1, e.data];\n            array1.shift();\n        };\n    }, [isPaused, data1]);\n  \n  const theme = useTheme();\n  const [state] = useState(values);\n\n  // local\n\n  return (\n    <>\n      <Grid container spacing={4}>\n        <Grid item md={6} xs={12}>\n        </Grid>\n        <Grid item md={6} xs={12}>\n        </Grid>\n        <Grid item md={6} xs={12}>\n        </Grid>\n        <Grid item md={6} xs={12}>\n          <Widget title={\"Dynamic Updating Chart\"} noBodyPadding>\n            <ReactApexChart\n              options={themeOptions(theme).options3}\n              series={state.series4}\n              type=\"line\"\n              height=\"350\"\n            />\n          </Widget>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}