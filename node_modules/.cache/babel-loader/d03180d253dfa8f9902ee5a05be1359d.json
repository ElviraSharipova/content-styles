{"ast":null,"code":"import _slicedToArray from\"/home/dekor/eqvium/react_material_test/admin-full/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{Grid,CircularProgress,TextField as Input}from\"@material-ui/core\";import{withRouter,useHistory}from\"react-router-dom\";// styles\nimport useStyles from\"./styles\";// logo\nimport logo from\"./logo.svg\";// context\nimport{useUserDispatch,resetPassword,authError}from\"../../context/UserContext\";//components\nimport{Button,Typography}from\"../../components/Wrappers\";function Reset(props){var classes=useStyles();var history=useHistory();// global\nvar userDispatch=useUserDispatch();var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),passwordValue=_useState2[0],setPasswordValue=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),confirmPasswordValue=_useState4[0],setConfirmPasswordValue=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isLoading=_useState6[0],setIsLoading=_useState6[1];var checkPassword=function checkPassword(){if(!isPasswordValid()){if(!passwordValue){authError(\"Password field is empty\")(userDispatch);}else{authError(\"Passwords are not equal\")(userDispatch);}setTimeout(function(){authError()(userDispatch);},3*1000);}};var isPasswordValid=function isPasswordValid(){return passwordValue&&passwordValue===confirmPasswordValue;};var doReset=function doReset(){var params=new URLSearchParams(history.location.search);var token=params.get('token');if(!token){authError(\"There are no token\")(userDispatch);}if(!isPasswordValid()){checkPassword();}else{resetPassword(token,passwordValue,history)(userDispatch);}};return/*#__PURE__*/React.createElement(Grid,{container:true,className:classes.container},/*#__PURE__*/React.createElement(\"div\",{className:classes.logotypeContainer},/*#__PURE__*/React.createElement(\"img\",{src:logo,alt:\"logo\",className:classes.logotypeImage}),/*#__PURE__*/React.createElement(Typography,{className:classes.logotypeText},\"Material Admin\")),/*#__PURE__*/React.createElement(\"div\",{className:classes.customFormContainer},/*#__PURE__*/React.createElement(\"div\",{className:classes.form},/*#__PURE__*/React.createElement(Input,{id:\"password\",InputProps:{classes:{underline:classes.InputUnderline,input:classes.Input}},value:passwordValue,onChange:function onChange(e){return setPasswordValue(e.target.value);},margin:\"normal\",placeholder:\"password\",type:\"password\",fullWidth:true}),/*#__PURE__*/React.createElement(Input,{id:\"confirmPassword\",InputProps:{classes:{underline:classes.InputUnderline,input:classes.Input}},value:confirmPasswordValue,onChange:function onChange(e){return setConfirmPasswordValue(e.target.value);},margin:\"normal\",placeholder:\"Confirm Password\",type:\"password\",fullWidth:true}),/*#__PURE__*/React.createElement(\"div\",{className:classes.formButtons},isLoading?/*#__PURE__*/React.createElement(CircularProgress,{size:26,className:classes.loginLoader}):/*#__PURE__*/React.createElement(Button,{disabled:passwordValue.length===0||confirmPasswordValue.length===0||passwordValue!==confirmPasswordValue,onClick:function onClick(){return doReset();},variant:\"contained\",color:\"primary\",size:\"large\"},\"reset password\"),/*#__PURE__*/React.createElement(Button,{color:\"primary\",size:\"large\",onClick:function onClick(){return history.push('/login');},className:classes.forgetButton},\"Back to login\"))),/*#__PURE__*/React.createElement(Typography,{color:\"primary\",className:classes.copyright},\"\\xA9 2014-2020 Flatlogic, LLC. All rights reserved.\")));}export default withRouter(Reset);","map":{"version":3,"sources":["/home/dekor/eqvium/react_material_test/admin-full/src/pages/reset/Reset.js"],"names":["React","useState","Grid","CircularProgress","TextField","Input","withRouter","useHistory","useStyles","useUserDispatch","resetPassword","authError","Button","Typography","Reset","props","classes","history","userDispatch","passwordValue","setPasswordValue","confirmPasswordValue","setConfirmPasswordValue","isLoading","setIsLoading","checkPassword","isPasswordValid","setTimeout","doReset","params","URLSearchParams","location","search","token","get","container","logotypeContainer","logo","logotypeImage","logotypeText","customFormContainer","form","underline","InputUnderline","input","e","target","value","formButtons","loginLoader","length","push","forgetButton","copyright"],"mappings":"wKAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OACEC,IADF,CAEEC,gBAFF,CAGEC,SAAS,GAAIC,CAAAA,KAHf,KAIO,mBAJP,CAKA,OAASC,UAAT,CAAqBC,UAArB,KAAuC,kBAAvC,CAEA;AACA,MAAOC,CAAAA,SAAP,KAAsB,UAAtB,CAEA;6BAGA;AACA,OAASC,eAAT,CAA0BC,aAA1B,CAAyCC,SAAzC,KAA0D,2BAA1D,CAEA;AACA,OAASC,MAAT,CAAiBC,UAAjB,KAAmC,2BAAnC,CAEA,QAASC,CAAAA,KAAT,CAAeC,KAAf,CAAsB,CACpB,GAAIC,CAAAA,OAAO,CAAGR,SAAS,EAAvB,CACA,GAAMS,CAAAA,OAAO,CAAGV,UAAU,EAA1B,CACA;AACA,GAAIW,CAAAA,YAAY,CAAGT,eAAe,EAAlC,CAJoB,cAKsBR,QAAQ,CAAC,EAAD,CAL9B,wCAKbkB,aALa,eAKEC,gBALF,8BAMoCnB,QAAQ,CAAC,EAAD,CAN5C,yCAMboB,oBANa,eAMSC,uBANT,8BAOcrB,QAAQ,CAAC,KAAD,CAPtB,yCAObsB,SAPa,eAOFC,YAPE,eAQlB,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC5B,GAAI,CAACC,eAAe,EAApB,CAAwB,CACtB,GAAI,CAACP,aAAL,CAAoB,CAClBR,SAAS,CAAC,yBAAD,CAAT,CAAqCO,YAArC,EACD,CAFD,IAEO,CACLP,SAAS,CAAC,yBAAD,CAAT,CAAqCO,YAArC,EACD,CACDS,UAAU,CAAC,UAAM,CACfhB,SAAS,GAAGO,YAAH,CAAT,CACD,CAFS,CAEP,EAAI,IAFG,CAAV,CAGD,CACA,CAXD,CAaA,GAAMQ,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC5B,MAAOP,CAAAA,aAAa,EAAIA,aAAa,GAAKE,oBAA1C,CACD,CAFD,CAIF,GAAMO,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CAEpB,GAAMC,CAAAA,MAAM,CAAG,GAAIC,CAAAA,eAAJ,CAAoBb,OAAO,CAACc,QAAR,CAAiBC,MAArC,CAAf,CACA,GAAMC,CAAAA,KAAK,CAAGJ,MAAM,CAACK,GAAP,CAAW,OAAX,CAAd,CACA,GAAI,CAACD,KAAL,CAAY,CACVtB,SAAS,CAAC,oBAAD,CAAT,CAAgCO,YAAhC,EACD,CAED,GAAI,CAACQ,eAAe,EAApB,CAAwB,CACtBD,aAAa,GACd,CAFD,IAEO,CACLf,aAAa,CAACuB,KAAD,CAAQd,aAAR,CAAuBF,OAAvB,CAAb,CAA6CC,YAA7C,EACD,CACF,CAbD,CAgBA,mBACE,oBAAC,IAAD,EAAM,SAAS,KAAf,CAAgB,SAAS,CAAEF,OAAO,CAACmB,SAAnC,eACE,2BAAK,SAAS,CAAEnB,OAAO,CAACoB,iBAAxB,eACE,2BAAK,GAAG,CAAEC,IAAV,CAAgB,GAAG,CAAC,MAApB,CAA2B,SAAS,CAAErB,OAAO,CAACsB,aAA9C,EADF,cAEE,oBAAC,UAAD,EAAY,SAAS,CAAEtB,OAAO,CAACuB,YAA/B,mBAFF,CADF,cAKE,2BAAK,SAAS,CAAEvB,OAAO,CAACwB,mBAAxB,eACE,2BAAK,SAAS,CAAExB,OAAO,CAACyB,IAAxB,eACA,oBAAC,KAAD,EACI,EAAE,CAAC,UADP,CAEI,UAAU,CAAE,CACVzB,OAAO,CAAE,CACP0B,SAAS,CAAE1B,OAAO,CAAC2B,cADZ,CAEPC,KAAK,CAAE5B,OAAO,CAACX,KAFR,CADC,CAFhB,CAQI,KAAK,CAAEc,aARX,CASI,QAAQ,CAAE,kBAAA0B,CAAC,QAAIzB,CAAAA,gBAAgB,CAACyB,CAAC,CAACC,MAAF,CAASC,KAAV,CAApB,EATf,CAUI,MAAM,CAAC,QAVX,CAWI,WAAW,CAAC,UAXhB,CAYI,IAAI,CAAC,UAZT,CAaI,SAAS,KAbb,EADA,cAgBE,oBAAC,KAAD,EACE,EAAE,CAAC,iBADL,CAEE,UAAU,CAAE,CACV/B,OAAO,CAAE,CACP0B,SAAS,CAAE1B,OAAO,CAAC2B,cADZ,CAEPC,KAAK,CAAE5B,OAAO,CAACX,KAFR,CADC,CAFd,CAQE,KAAK,CAAEgB,oBART,CASE,QAAQ,CAAE,kBAAAwB,CAAC,QAAIvB,CAAAA,uBAAuB,CAACuB,CAAC,CAACC,MAAF,CAASC,KAAV,CAA3B,EATb,CAUE,MAAM,CAAC,QAVT,CAWE,WAAW,CAAC,kBAXd,CAYE,IAAI,CAAC,UAZP,CAaE,SAAS,KAbX,EAhBF,cA+BE,2BAAK,SAAS,CAAE/B,OAAO,CAACgC,WAAxB,EACGzB,SAAS,cACR,oBAAC,gBAAD,EAAkB,IAAI,CAAE,EAAxB,CAA4B,SAAS,CAAEP,OAAO,CAACiC,WAA/C,EADQ,cAGR,oBAAC,MAAD,EACE,QAAQ,CACL9B,aAAa,CAAC+B,MAAd,GAAyB,CAAzB,EAA8B7B,oBAAoB,CAAC6B,MAArB,GAAgC,CAA/D,EAAsE/B,aAAa,GAAKE,oBAF5F,CAIE,OAAO,CAAE,yBAAMO,CAAAA,OAAO,EAAb,EAJX,CAKE,OAAO,CAAC,WALV,CAME,KAAK,CAAC,SANR,CAOE,IAAI,CAAC,OAPP,mBAJJ,cAgBE,oBAAC,MAAD,EACE,KAAK,CAAC,SADR,CAEE,IAAI,CAAC,OAFP,CAGE,OAAO,CAAE,yBAAMX,CAAAA,OAAO,CAACkC,IAAR,CAAa,QAAb,CAAN,EAHX,CAIE,SAAS,CAAEnC,OAAO,CAACoC,YAJrB,kBAhBF,CA/BF,CADF,cA0DE,oBAAC,UAAD,EAAY,KAAK,CAAC,SAAlB,CAA4B,SAAS,CAAEpC,OAAO,CAACqC,SAA/C,wDA1DF,CALF,CADF,CAsED,CAED,cAAe/C,CAAAA,UAAU,CAACQ,KAAD,CAAzB","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Grid,\n  CircularProgress,\n  TextField as Input\n} from \"@material-ui/core\";\nimport { withRouter, useHistory } from \"react-router-dom\";\n\n// styles\nimport useStyles from \"./styles\";\n\n// logo\nimport logo from \"./logo.svg\";\n\n// context\nimport { useUserDispatch, resetPassword, authError } from \"../../context/UserContext\";\n\n//components\nimport { Button, Typography } from \"../../components/Wrappers\";\n\nfunction Reset(props) {\n  var classes = useStyles();\n  const history = useHistory();\n  // global\n  var userDispatch = useUserDispatch();\n  const [passwordValue, setPasswordValue] = useState(\"\");\n  const [confirmPasswordValue, setConfirmPasswordValue] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n    const checkPassword = () => {\n    if (!isPasswordValid()) {\n      if (!passwordValue) {\n        authError(\"Password field is empty\")(userDispatch);\n      } else {\n        authError(\"Passwords are not equal\")(userDispatch);\n      }\n      setTimeout(() => {\n        authError()(userDispatch);\n      }, 3 * 1000)\n    }\n    }\n\n    const isPasswordValid = () => {\n      return passwordValue && passwordValue === confirmPasswordValue;\n    }\n\n  const doReset = () => {\n\n    const params = new URLSearchParams(history.location.search);\n    const token = params.get('token');\n    if (!token) {\n      authError(\"There are no token\")(userDispatch)\n    }\n\n    if (!isPasswordValid()) {\n      checkPassword();\n    } else {\n      resetPassword(token, passwordValue, history)(userDispatch);\n    }\n  }\n\n\n  return (\n    <Grid container className={classes.container}>\n      <div className={classes.logotypeContainer}>\n        <img src={logo} alt=\"logo\" className={classes.logotypeImage} />\n        <Typography className={classes.logotypeText}>Material Admin</Typography>\n      </div>\n      <div className={classes.customFormContainer}>\n        <div className={classes.form}>\n        <Input\n            id=\"password\"\n            InputProps={{\n              classes: {\n                underline: classes.InputUnderline,\n                input: classes.Input\n              }\n            }}\n            value={passwordValue}\n            onChange={e => setPasswordValue(e.target.value)}\n            margin=\"normal\"\n            placeholder=\"password\"\n            type=\"password\"\n            fullWidth\n          />\n          <Input\n            id=\"confirmPassword\"\n            InputProps={{\n              classes: {\n                underline: classes.InputUnderline,\n                input: classes.Input\n              }\n            }}\n            value={confirmPasswordValue}\n            onChange={e => setConfirmPasswordValue(e.target.value)}\n            margin=\"normal\"\n            placeholder=\"Confirm Password\"\n            type=\"password\"\n            fullWidth\n          />\n          <div className={classes.formButtons}>\n            {isLoading ? (\n              <CircularProgress size={26} className={classes.loginLoader} />\n            ) : (\n              <Button\n                disabled={\n                  (passwordValue.length === 0 || confirmPasswordValue.length === 0) || (passwordValue !== confirmPasswordValue)\n                }\n                onClick={() => doReset()}\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n              >\n                reset password\n              </Button>\n            )}\n            <Button\n              color=\"primary\"\n              size=\"large\"\n              onClick={() => history.push('/login')}\n              className={classes.forgetButton}\n            >\n              Back to login\n            </Button>\n          </div>\n        </div>\n        <Typography color=\"primary\" className={classes.copyright}>\n          © 2014-2020 Flatlogic, LLC. All rights reserved.\n        </Typography>\n      </div>\n    </Grid>\n  );\n}\n\nexport default withRouter(Reset);\n"]},"metadata":{},"sourceType":"module"}