{"ast":null,"code":"var _jsxFileName = \"/home/dekor/eqvium/react_material_test/admin-full/src/pages/charts/LineCharts.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/styles\";\nimport ReactApexChart from \"react-apexcharts\";\nimport ApexCharts from \"apexcharts\"; // components\n\nimport Widget from \"../../components/Widget/Widget\"; //Realtime chart\n\nvar lastDate = 0;\nvar data = [];\nvar TICKINTERVAL = 86400000;\nlet XAXISRANGE = 777600000;\n\nlet _isMounted;\n\nfunction getDayWiseTimeSeries(baseval, count, yrange) {\n  var i = 0;\n\n  while (i < count) {\n    var x = baseval;\n    var y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n    data.push({\n      x,\n      y\n    });\n    lastDate = baseval;\n    baseval += TICKINTERVAL;\n    i++;\n  }\n}\n\nfunction intervals() {\n  if (_isMounted) {\n    window.setInterval(() => {\n      getNewSeries(lastDate, {\n        min: 10,\n        max: 90\n      });\n      ApexCharts.exec(\"realtime\", \"updateSeries\", [{\n        data: data\n      }]);\n    }, 100);\n  }\n}\n\ngetDayWiseTimeSeries(new Date(\"11 Feb 2019 GMT\").getTime(), 10, {\n  min: 10,\n  max: 90\n});\n\nfunction getNewSeries(baseval, yrange) {\n  var newDate = baseval + TICKINTERVAL;\n  lastDate = newDate;\n\n  for (var i = 0; i < data.length - 10; i++) {\n    // IMPORTANT\n    // we reset the x and y of the data which is out of drawing area\n    // to prevent memory leaks\n    data[i].x = newDate - XAXISRANGE - TICKINTERVAL;\n    data[i].y = 0;\n  }\n\n  data.push({\n    x: newDate,\n    y: Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min\n  });\n} //Zoomable Timeseries\n\n\nvar ts2 = 1484418600000;\nvar dates = [];\n\nfor (var i = 0; i < 120; i++) {\n  ts2 = ts2 + 86400000;\n  var innerArr = [ts2, Math.round(Math.random(0) * 100)];\n  dates.push(innerArr);\n}\n\nconst themeOptions = theme => {\n  return {\n    // first container chart\n    grid: {\n      row: {\n        colors: [theme.palette.primary.light, \"transparent\"],\n        // takes an array which will be repeated on columns\n        opacity: 0.1\n      }\n    },\n    colors: [theme.palette.primary.main],\n    xaxis: {\n      categories: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\"]\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      curve: \"smooth\"\n    },\n    chart: {\n      toolbar: {\n        show: false\n      }\n    },\n    legend: {\n      show: false\n    },\n    // second container chart\n    options: {\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        curve: \"smooth\"\n      },\n      chart: {\n        shadow: {\n          enabled: true,\n          color: \"#000\",\n          top: 18,\n          left: 7,\n          blur: 10,\n          opacity: 1\n        },\n        toolbar: {\n          show: false\n        }\n      },\n      colors: [theme.palette.primary.main, theme.palette.success.main],\n      grid: {\n        borderColor: \"#e7e7e7\",\n        row: {\n          colors: [\"#f3f3f3\", \"transparent\"],\n          // takes an array which will be repeated on columns\n          opacity: 0.5\n        }\n      },\n      markers: {\n        size: 6\n      },\n      xaxis: {\n        categories: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\"],\n        title: {\n          text: \"Month\"\n        }\n      },\n      yaxis: {\n        title: {\n          text: \"Temperature\"\n        },\n        min: 5,\n        max: 40\n      },\n      legend: {\n        position: \"top\",\n        horizontalAlign: \"right\",\n        floating: true,\n        offsetY: -25,\n        offsetX: -5\n      }\n    },\n    // third container chart\n    options2: {\n      stroke: {\n        curve: \"smooth\"\n      },\n      legend: {\n        show: false\n      },\n      chart: {\n        stacked: false,\n        zoom: {\n          type: \"x\",\n          enabled: true,\n          autoScaleYaxis: true\n        },\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        line: {\n          curve: \"smooth\"\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      markers: {\n        size: 0,\n        style: \"full\"\n      },\n      colors: [theme.palette.success.light],\n      fill: {\n        type: \"gradient\",\n        gradient: {\n          shadeIntensity: 1,\n          inverseColors: false,\n          opacityFrom: 0.5,\n          opacityTo: 0,\n          stops: [0, 90, 100]\n        }\n      },\n      xaxis: {\n        type: \"datetime\"\n      },\n      tooltip: {\n        shared: false,\n        y: {\n          formatter: function (val) {\n            return val;\n          }\n        }\n      }\n    },\n    // fourth chart container\n    options3: {\n      colors: [theme.palette.primary.light],\n      chart: {\n        id: \"realtime\",\n        animations: {\n          enabled: true,\n          easing: \"linear\",\n          dynamicAnimation: {\n            speed: 1000\n          }\n        },\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        curve: \"smooth\"\n      },\n      markers: {\n        size: 0\n      },\n      xaxis: {\n        type: \"datetime\",\n        range: XAXISRANGE\n      },\n      yaxis: {\n        max: 100\n      },\n      legend: {\n        show: false\n      }\n    }\n  };\n};\n\nconst values = {\n  series: [{\n    name: \"Desktops\",\n    data: [10, 41, 35, 51, 49, 62, 69, 91, 148]\n  }],\n  series2: [{\n    name: \"High - 2019\",\n    data: [28, 29, 33, 36, 32, 32, 33]\n  }, {\n    name: \"Low - 2019\",\n    data: [12, 11, 14, 18, 17, 13, 13]\n  }],\n  series3: [{\n    name: \"Flatlogic LLC\",\n    data: dates\n  }],\n  series4: [{\n    data: data.slice()\n  }]\n}; //class Calendar extends React.Component {\n\nexport default function Charts(props) {\n  useEffect(() => {\n    intervals();\n    return function cleanup() {\n      _isMounted = false;\n      data = data.slice(data.length - 10, data.length);\n    };\n  });\n  const theme = useTheme();\n  const [state] = useState(values); // local\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Widget, {\n    title: \"Dynamic Updating Chart\",\n    noBodyPadding: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ReactApexChart, {\n    options: themeOptions(theme).options3,\n    series: state.series4,\n    type: \"line\",\n    height: \"350\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 13\n    }\n  })))));\n}","map":{"version":3,"sources":["/home/dekor/eqvium/react_material_test/admin-full/src/pages/charts/LineCharts.js"],"names":["React","useState","useEffect","Grid","useTheme","ReactApexChart","ApexCharts","Widget","lastDate","data","TICKINTERVAL","XAXISRANGE","_isMounted","getDayWiseTimeSeries","baseval","count","yrange","i","x","y","Math","floor","random","max","min","push","intervals","window","setInterval","getNewSeries","exec","Date","getTime","newDate","length","ts2","dates","innerArr","round","themeOptions","theme","grid","row","colors","palette","primary","light","opacity","main","xaxis","categories","dataLabels","enabled","stroke","curve","chart","toolbar","show","legend","options","shadow","color","top","left","blur","success","borderColor","markers","size","title","text","yaxis","position","horizontalAlign","floating","offsetY","offsetX","options2","stacked","zoom","type","autoScaleYaxis","plotOptions","line","style","fill","gradient","shadeIntensity","inverseColors","opacityFrom","opacityTo","stops","tooltip","shared","formatter","val","options3","id","animations","easing","dynamicAnimation","speed","range","values","series","name","series2","series3","series4","slice","Charts","props","cleanup","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,gCAAnB,C,CAEA;;AACA,IAAIC,QAAQ,GAAG,CAAf;AACA,IAAIC,IAAI,GAAG,EAAX;AACA,IAAIC,YAAY,GAAG,QAAnB;AACA,IAAIC,UAAU,GAAG,SAAjB;;AACA,IAAIC,UAAJ;;AACA,SAASC,oBAAT,CAA8BC,OAA9B,EAAuCC,KAAvC,EAA8CC,MAA9C,EAAsD;AACpD,MAAIC,CAAC,GAAG,CAAR;;AACA,SAAOA,CAAC,GAAGF,KAAX,EAAkB;AAChB,QAAIG,CAAC,GAAGJ,OAAR;AACA,QAAIK,CAAC,GACHC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBN,MAAM,CAACO,GAAP,GAAaP,MAAM,CAACQ,GAApB,GAA0B,CAA3C,CAAX,IAA4DR,MAAM,CAACQ,GADrE;AAGAf,IAAAA,IAAI,CAACgB,IAAL,CAAU;AACRP,MAAAA,CADQ;AAERC,MAAAA;AAFQ,KAAV;AAIAX,IAAAA,QAAQ,GAAGM,OAAX;AACAA,IAAAA,OAAO,IAAIJ,YAAX;AACAO,IAAAA,CAAC;AACF;AACF;;AAED,SAASS,SAAT,GAAqB;AACnB,MAAId,UAAJ,EAAgB;AACde,IAAAA,MAAM,CAACC,WAAP,CAAmB,MAAM;AACvBC,MAAAA,YAAY,CAACrB,QAAD,EAAW;AACrBgB,QAAAA,GAAG,EAAE,EADgB;AAErBD,QAAAA,GAAG,EAAE;AAFgB,OAAX,CAAZ;AAKAjB,MAAAA,UAAU,CAACwB,IAAX,CAAgB,UAAhB,EAA4B,cAA5B,EAA4C,CAC1C;AACErB,QAAAA,IAAI,EAAEA;AADR,OAD0C,CAA5C;AAKD,KAXD,EAWG,GAXH;AAYD;AACF;;AAEDI,oBAAoB,CAAC,IAAIkB,IAAJ,CAAS,iBAAT,EAA4BC,OAA5B,EAAD,EAAwC,EAAxC,EAA4C;AAC9DR,EAAAA,GAAG,EAAE,EADyD;AAE9DD,EAAAA,GAAG,EAAE;AAFyD,CAA5C,CAApB;;AAKA,SAASM,YAAT,CAAsBf,OAAtB,EAA+BE,MAA/B,EAAuC;AACrC,MAAIiB,OAAO,GAAGnB,OAAO,GAAGJ,YAAxB;AACAF,EAAAA,QAAQ,GAAGyB,OAAX;;AAEA,OAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,IAAI,CAACyB,MAAL,GAAc,EAAlC,EAAsCjB,CAAC,EAAvC,EAA2C;AACzC;AACA;AACA;AACAR,IAAAA,IAAI,CAACQ,CAAD,CAAJ,CAAQC,CAAR,GAAYe,OAAO,GAAGtB,UAAV,GAAuBD,YAAnC;AACAD,IAAAA,IAAI,CAACQ,CAAD,CAAJ,CAAQE,CAAR,GAAY,CAAZ;AACD;;AAEDV,EAAAA,IAAI,CAACgB,IAAL,CAAU;AACRP,IAAAA,CAAC,EAAEe,OADK;AAERd,IAAAA,CAAC,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBN,MAAM,CAACO,GAAP,GAAaP,MAAM,CAACQ,GAApB,GAA0B,CAA3C,CAAX,IAA4DR,MAAM,CAACQ;AAF9D,GAAV;AAID,C,CAED;;;AACA,IAAIW,GAAG,GAAG,aAAV;AACA,IAAIC,KAAK,GAAG,EAAZ;;AACA,KAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5BkB,EAAAA,GAAG,GAAGA,GAAG,GAAG,QAAZ;AACA,MAAIE,QAAQ,GAAG,CAACF,GAAD,EAAMf,IAAI,CAACkB,KAAL,CAAWlB,IAAI,CAACE,MAAL,CAAY,CAAZ,IAAiB,GAA5B,CAAN,CAAf;AACAc,EAAAA,KAAK,CAACX,IAAN,CAAWY,QAAX;AACD;;AAED,MAAME,YAAY,GAAGC,KAAK,IAAI;AAC5B,SAAO;AACL;AACAC,IAAAA,IAAI,EAAE;AACJC,MAAAA,GAAG,EAAE;AACHC,QAAAA,MAAM,EAAE,CAACH,KAAK,CAACI,OAAN,CAAcC,OAAd,CAAsBC,KAAvB,EAA8B,aAA9B,CADL;AACmD;AACtDC,QAAAA,OAAO,EAAE;AAFN;AADD,KAFD;AAQLJ,IAAAA,MAAM,EAAE,CAACH,KAAK,CAACI,OAAN,CAAcC,OAAd,CAAsBG,IAAvB,CARH;AASLC,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE,CACV,KADU,EAEV,KAFU,EAGV,KAHU,EAIV,KAJU,EAKV,KALU,EAMV,KANU,EAOV,KAPU,EAQV,KARU,EASV,KATU;AADP,KATF;AAsBLC,IAAAA,UAAU,EAAE;AACVC,MAAAA,OAAO,EAAE;AADC,KAtBP;AAyBLC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE;AADD,KAzBH;AA4BLC,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAE;AADC;AADJ,KA5BF;AAiCLC,IAAAA,MAAM,EAAE;AACND,MAAAA,IAAI,EAAE;AADA,KAjCH;AAoCL;AACAE,IAAAA,OAAO,EAAE;AACPR,MAAAA,UAAU,EAAE;AACVC,QAAAA,OAAO,EAAE;AADC,OADL;AAIPC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE;AADD,OAJD;AAOPC,MAAAA,KAAK,EAAE;AACLK,QAAAA,MAAM,EAAE;AACNR,UAAAA,OAAO,EAAE,IADH;AAENS,UAAAA,KAAK,EAAE,MAFD;AAGNC,UAAAA,GAAG,EAAE,EAHC;AAINC,UAAAA,IAAI,EAAE,CAJA;AAKNC,UAAAA,IAAI,EAAE,EALA;AAMNjB,UAAAA,OAAO,EAAE;AANH,SADH;AASLS,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAE;AADC;AATJ,OAPA;AAoBPd,MAAAA,MAAM,EAAE,CAACH,KAAK,CAACI,OAAN,CAAcC,OAAd,CAAsBG,IAAvB,EAA6BR,KAAK,CAACI,OAAN,CAAcqB,OAAd,CAAsBjB,IAAnD,CApBD;AAqBPP,MAAAA,IAAI,EAAE;AACJyB,QAAAA,WAAW,EAAE,SADT;AAEJxB,QAAAA,GAAG,EAAE;AACHC,UAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,aAAZ,CADL;AACiC;AACpCI,UAAAA,OAAO,EAAE;AAFN;AAFD,OArBC;AA4BPoB,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAE;AADC,OA5BF;AA+BPnB,MAAAA,KAAK,EAAE;AACLC,QAAAA,UAAU,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CADP;AAELmB,QAAAA,KAAK,EAAE;AACLC,UAAAA,IAAI,EAAE;AADD;AAFF,OA/BA;AAqCPC,MAAAA,KAAK,EAAE;AACLF,QAAAA,KAAK,EAAE;AACLC,UAAAA,IAAI,EAAE;AADD,SADF;AAIL9C,QAAAA,GAAG,EAAE,CAJA;AAKLD,QAAAA,GAAG,EAAE;AALA,OArCA;AA4CPmC,MAAAA,MAAM,EAAE;AACNc,QAAAA,QAAQ,EAAE,KADJ;AAENC,QAAAA,eAAe,EAAE,OAFX;AAGNC,QAAAA,QAAQ,EAAE,IAHJ;AAINC,QAAAA,OAAO,EAAE,CAAC,EAJJ;AAKNC,QAAAA,OAAO,EAAE,CAAC;AALJ;AA5CD,KArCJ;AAyFL;AACAC,IAAAA,QAAQ,EAAE;AACRxB,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE;AADD,OADA;AAIRI,MAAAA,MAAM,EAAE;AACND,QAAAA,IAAI,EAAE;AADA,OAJA;AAORF,MAAAA,KAAK,EAAE;AACLuB,QAAAA,OAAO,EAAE,KADJ;AAELC,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAE,GADF;AAEJ5B,UAAAA,OAAO,EAAE,IAFL;AAGJ6B,UAAAA,cAAc,EAAE;AAHZ,SAFD;AAOLzB,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAE;AADC;AAPJ,OAPC;AAkBRyB,MAAAA,WAAW,EAAE;AACXC,QAAAA,IAAI,EAAE;AACJ7B,UAAAA,KAAK,EAAE;AADH;AADK,OAlBL;AAuBRH,MAAAA,UAAU,EAAE;AACVC,QAAAA,OAAO,EAAE;AADC,OAvBJ;AA0BRe,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAE,CADC;AAEPgB,QAAAA,KAAK,EAAE;AAFA,OA1BD;AA8BRzC,MAAAA,MAAM,EAAE,CAACH,KAAK,CAACI,OAAN,CAAcqB,OAAd,CAAsBnB,KAAvB,CA9BA;AA+BRuC,MAAAA,IAAI,EAAE;AACJL,QAAAA,IAAI,EAAE,UADF;AAEJM,QAAAA,QAAQ,EAAE;AACRC,UAAAA,cAAc,EAAE,CADR;AAERC,UAAAA,aAAa,EAAE,KAFP;AAGRC,UAAAA,WAAW,EAAE,GAHL;AAIRC,UAAAA,SAAS,EAAE,CAJH;AAKRC,UAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,GAAR;AALC;AAFN,OA/BE;AAyCR1C,MAAAA,KAAK,EAAE;AACL+B,QAAAA,IAAI,EAAE;AADD,OAzCC;AA6CRY,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,KADD;AAEP1E,QAAAA,CAAC,EAAE;AACD2E,UAAAA,SAAS,EAAE,UAASC,GAAT,EAAc;AACvB,mBAAOA,GAAP;AACD;AAHA;AAFI;AA7CD,KA1FL;AAgJL;AACAC,IAAAA,QAAQ,EAAE;AACRrD,MAAAA,MAAM,EAAE,CAACH,KAAK,CAACI,OAAN,CAAcC,OAAd,CAAsBC,KAAvB,CADA;AAERS,MAAAA,KAAK,EAAE;AACL0C,QAAAA,EAAE,EAAE,UADC;AAELC,QAAAA,UAAU,EAAE;AACV9C,UAAAA,OAAO,EAAE,IADC;AAEV+C,UAAAA,MAAM,EAAE,QAFE;AAGVC,UAAAA,gBAAgB,EAAE;AAChBC,YAAAA,KAAK,EAAE;AADS;AAHR,SAFP;AASL7C,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAE;AADC,SATJ;AAYLsB,QAAAA,IAAI,EAAE;AACJ3B,UAAAA,OAAO,EAAE;AADL;AAZD,OAFC;AAkBRD,MAAAA,UAAU,EAAE;AACVC,QAAAA,OAAO,EAAE;AADC,OAlBJ;AAqBRC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE;AADD,OArBA;AAwBRa,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAE;AADC,OAxBD;AA2BRnB,MAAAA,KAAK,EAAE;AACL+B,QAAAA,IAAI,EAAE,UADD;AAELsB,QAAAA,KAAK,EAAE3F;AAFF,OA3BC;AA+BR4D,MAAAA,KAAK,EAAE;AACLhD,QAAAA,GAAG,EAAE;AADA,OA/BC;AAkCRmC,MAAAA,MAAM,EAAE;AACND,QAAAA,IAAI,EAAE;AADA;AAlCA;AAjJL,GAAP;AAwLD,CAzLD;;AA2LA,MAAM8C,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,IAAI,EAAE,UADR;AAEEhG,IAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,GAAjC;AAFR,GADM,CADK;AAObiG,EAAAA,OAAO,EAAE,CACP;AACED,IAAAA,IAAI,EAAE,aADR;AAEEhG,IAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB;AAFR,GADO,EAKP;AACEgG,IAAAA,IAAI,EAAE,YADR;AAEEhG,IAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB;AAFR,GALO,CAPI;AAiBbkG,EAAAA,OAAO,EAAE,CACP;AACEF,IAAAA,IAAI,EAAE,eADR;AAEEhG,IAAAA,IAAI,EAAE2B;AAFR,GADO,CAjBI;AAuBbwE,EAAAA,OAAO,EAAE,CACP;AACEnG,IAAAA,IAAI,EAAEA,IAAI,CAACoG,KAAL;AADR,GADO;AAvBI,CAAf,C,CA8BA;;AAEA,eAAe,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACpC7G,EAAAA,SAAS,CAAC,MAAM;AACdwB,IAAAA,SAAS;AACT,WAAO,SAASsF,OAAT,GAAmB;AACxBpG,MAAAA,UAAU,GAAG,KAAb;AACAH,MAAAA,IAAI,GAAGA,IAAI,CAACoG,KAAL,CAAWpG,IAAI,CAACyB,MAAL,GAAc,EAAzB,EAA6BzB,IAAI,CAACyB,MAAlC,CAAP;AACD,KAHD;AAID,GANQ,CAAT;AAOA,QAAMM,KAAK,GAAGpC,QAAQ,EAAtB;AACA,QAAM,CAAC6G,KAAD,IAAUhH,QAAQ,CAACsG,MAAD,CAAxB,CAToC,CAWpC;;AAEA,sBACE,uDACE,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,CAAf;AAAkB,IAAA,EAAE,EAAE,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAE,wBAAf;AAAyC,IAAA,aAAa,MAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AACE,IAAA,OAAO,EAAEhE,YAAY,CAACC,KAAD,CAAZ,CAAoBwD,QAD/B;AAEE,IAAA,MAAM,EAAEiB,KAAK,CAACL,OAFhB;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,MAAM,EAAC,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CADF,CADF;AAgBD","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/styles\";\nimport ReactApexChart from \"react-apexcharts\";\nimport ApexCharts from \"apexcharts\";\n\n// components\nimport Widget from \"../../components/Widget/Widget\";\n\n//Realtime chart\nvar lastDate = 0;\nvar data = [];\nvar TICKINTERVAL = 86400000;\nlet XAXISRANGE = 777600000;\nlet _isMounted;\nfunction getDayWiseTimeSeries(baseval, count, yrange) {\n  var i = 0;\n  while (i < count) {\n    var x = baseval;\n    var y =\n      Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n\n    data.push({\n      x,\n      y\n    });\n    lastDate = baseval;\n    baseval += TICKINTERVAL;\n    i++;\n  }\n}\n\nfunction intervals() {\n  if (_isMounted) {\n    window.setInterval(() => {\n      getNewSeries(lastDate, {\n        min: 10,\n        max: 90\n      });\n\n      ApexCharts.exec(\"realtime\", \"updateSeries\", [\n        {\n          data: data\n        }\n      ]);\n    }, 100);\n  }\n}\n\ngetDayWiseTimeSeries(new Date(\"11 Feb 2019 GMT\").getTime(), 10, {\n  min: 10,\n  max: 90\n});\n\nfunction getNewSeries(baseval, yrange) {\n  var newDate = baseval + TICKINTERVAL;\n  lastDate = newDate;\n\n  for (var i = 0; i < data.length - 10; i++) {\n    // IMPORTANT\n    // we reset the x and y of the data which is out of drawing area\n    // to prevent memory leaks\n    data[i].x = newDate - XAXISRANGE - TICKINTERVAL;\n    data[i].y = 0;\n  }\n\n  data.push({\n    x: newDate,\n    y: Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min\n  });\n}\n\n//Zoomable Timeseries\nvar ts2 = 1484418600000;\nvar dates = [];\nfor (var i = 0; i < 120; i++) {\n  ts2 = ts2 + 86400000;\n  var innerArr = [ts2, Math.round(Math.random(0) * 100)];\n  dates.push(innerArr);\n}\n\nconst themeOptions = theme => {\n  return {\n    // first container chart\n    grid: {\n      row: {\n        colors: [theme.palette.primary.light, \"transparent\"], // takes an array which will be repeated on columns\n        opacity: 0.1\n      }\n    },\n    colors: [theme.palette.primary.main],\n    xaxis: {\n      categories: [\n        \"Jan\",\n        \"Feb\",\n        \"Mar\",\n        \"Apr\",\n        \"May\",\n        \"Jun\",\n        \"Jul\",\n        \"Aug\",\n        \"Sep\"\n      ]\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      curve: \"smooth\"\n    },\n    chart: {\n      toolbar: {\n        show: false\n      }\n    },\n    legend: {\n      show: false\n    },\n    // second container chart\n    options: {\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        curve: \"smooth\"\n      },\n      chart: {\n        shadow: {\n          enabled: true,\n          color: \"#000\",\n          top: 18,\n          left: 7,\n          blur: 10,\n          opacity: 1\n        },\n        toolbar: {\n          show: false\n        }\n      },\n      colors: [theme.palette.primary.main, theme.palette.success.main],\n      grid: {\n        borderColor: \"#e7e7e7\",\n        row: {\n          colors: [\"#f3f3f3\", \"transparent\"], // takes an array which will be repeated on columns\n          opacity: 0.5\n        }\n      },\n      markers: {\n        size: 6\n      },\n      xaxis: {\n        categories: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\"],\n        title: {\n          text: \"Month\"\n        }\n      },\n      yaxis: {\n        title: {\n          text: \"Temperature\"\n        },\n        min: 5,\n        max: 40\n      },\n      legend: {\n        position: \"top\",\n        horizontalAlign: \"right\",\n        floating: true,\n        offsetY: -25,\n        offsetX: -5\n      }\n    },\n    // third container chart\n    options2: {\n      stroke: {\n        curve: \"smooth\"\n      },\n      legend: {\n        show: false\n      },\n      chart: {\n        stacked: false,\n        zoom: {\n          type: \"x\",\n          enabled: true,\n          autoScaleYaxis: true\n        },\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        line: {\n          curve: \"smooth\"\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      markers: {\n        size: 0,\n        style: \"full\"\n      },\n      colors: [theme.palette.success.light],\n      fill: {\n        type: \"gradient\",\n        gradient: {\n          shadeIntensity: 1,\n          inverseColors: false,\n          opacityFrom: 0.5,\n          opacityTo: 0,\n          stops: [0, 90, 100]\n        }\n      },\n      xaxis: {\n        type: \"datetime\"\n      },\n\n      tooltip: {\n        shared: false,\n        y: {\n          formatter: function(val) {\n            return val;\n          }\n        }\n      }\n    },\n    // fourth chart container\n    options3: {\n      colors: [theme.palette.primary.light],\n      chart: {\n        id: \"realtime\",\n        animations: {\n          enabled: true,\n          easing: \"linear\",\n          dynamicAnimation: {\n            speed: 1000\n          }\n        },\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        curve: \"smooth\"\n      },\n      markers: {\n        size: 0\n      },\n      xaxis: {\n        type: \"datetime\",\n        range: XAXISRANGE\n      },\n      yaxis: {\n        max: 100\n      },\n      legend: {\n        show: false\n      }\n    }\n  };\n};\n\nconst values = {\n  series: [\n    {\n      name: \"Desktops\",\n      data: [10, 41, 35, 51, 49, 62, 69, 91, 148]\n    }\n  ],\n  series2: [\n    {\n      name: \"High - 2019\",\n      data: [28, 29, 33, 36, 32, 32, 33]\n    },\n    {\n      name: \"Low - 2019\",\n      data: [12, 11, 14, 18, 17, 13, 13]\n    }\n  ],\n  series3: [\n    {\n      name: \"Flatlogic LLC\",\n      data: dates\n    }\n  ],\n  series4: [\n    {\n      data: data.slice()\n    }\n  ]\n};\n\n//class Calendar extends React.Component {\n\nexport default function Charts(props) {\n  useEffect(() => {\n    intervals();\n    return function cleanup() {\n      _isMounted = false;\n      data = data.slice(data.length - 10, data.length);\n    };\n  });\n  const theme = useTheme();\n  const [state] = useState(values);\n\n  // local\n\n  return (\n    <>\n      <Grid container spacing={4}>\n        <Grid item md={6} xs={12}>\n          <Widget title={\"Dynamic Updating Chart\"} noBodyPadding>\n            <ReactApexChart\n              options={themeOptions(theme).options3}\n              series={state.series4}\n              type=\"line\"\n              height=\"350\"\n            />\n          </Widget>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}