{"ast":null,"code":"var _jsxFileName = \"/home/dekor/eqvium/react_material_test/admin-full-v2/src/components/Sidebar/Sidebar.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { ArrowBack as ArrowBackIcon } from \"@material-ui/icons\";\nimport { Drawer, IconButton, List } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/styles\";\nimport { withRouter } from \"react-router-dom\";\nimport classNames from \"classnames\"; // styles\n\nimport useStyles from \"./styles\"; // components\n\nimport SidebarLink from \"./components/SidebarLink/SidebarLink\"; // context\n\nimport { useLayoutState, useLayoutDispatch, toggleSidebar } from \"../../context/LayoutContext\";\n\nfunction Sidebar({\n  location,\n  structure\n}) {\n  var classes = useStyles();\n  var theme = useTheme();\n\n  const toggleDrawer = value => event => {\n    if (event.type === \"keydown\" && (event.key === \"Tab\" || event.key === \"Shift\")) {\n      return;\n    }\n\n    if (value && !isPermanent) toggleSidebar(layoutDispatch);\n  }; // global\n\n\n  var {\n    isSidebarOpened\n  } = useLayoutState();\n  var layoutDispatch = useLayoutDispatch(); // local\n\n  var [isPermanent, setPermanent] = useState(true);\n  useEffect(function () {\n    window.addEventListener(\"resize\", handleWindowWidthChange);\n    handleWindowWidthChange();\n    return function cleanup() {\n      window.removeEventListener(\"resize\", handleWindowWidthChange);\n    };\n  });\n  return /*#__PURE__*/React.createElement(Drawer, {\n    variant: isPermanent ? \"permanent\" : \"temporary\",\n    className: classNames(classes.drawer, {\n      [classes.drawerOpen]: !isPermanent ? !isSidebarOpened : isSidebarOpened,\n      [classes.drawerClose]: !isPermanent ? isSidebarOpened : !isSidebarOpened\n    }),\n    classes: {\n      paper: classNames({\n        [classes.drawerOpen]: !isPermanent ? !isSidebarOpened : isSidebarOpened,\n        [classes.drawerClose]: !isPermanent ? isSidebarOpened : !isSidebarOpened\n      })\n    },\n    open: !isPermanent ? !isSidebarOpened : isSidebarOpened,\n    onClose: toggleDrawer(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.toolbar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.mobileBackButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: () => toggleSidebar(layoutDispatch),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ArrowBackIcon, {\n    classes: {\n      root: classNames(classes.headerIcon, classes.headerIconCollapse)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(List, {\n    className: classes.sidebarList,\n    classes: {\n      padding: classes.padding\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, structure.map(link => /*#__PURE__*/React.createElement(SidebarLink, Object.assign({\n    key: link.id,\n    location: location,\n    isSidebarOpened: !isPermanent ? !isSidebarOpened : isSidebarOpened\n  }, link, {\n    toggleDrawer: toggleDrawer(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }))))); // ##################################################################\n\n  function handleWindowWidthChange() {\n    var windowWidth = window.innerWidth;\n    var breakpointWidth = theme.breakpoints.values.md;\n    var isSmallScreen = windowWidth < breakpointWidth;\n\n    if (isSmallScreen && isPermanent) {\n      setPermanent(false);\n    } else if (!isSmallScreen && !isPermanent) {\n      setPermanent(true);\n    }\n  }\n}\n\nexport default withRouter(Sidebar);","map":{"version":3,"sources":["/home/dekor/eqvium/react_material_test/admin-full-v2/src/components/Sidebar/Sidebar.js"],"names":["React","useState","useEffect","ArrowBack","ArrowBackIcon","Drawer","IconButton","List","useTheme","withRouter","classNames","useStyles","SidebarLink","useLayoutState","useLayoutDispatch","toggleSidebar","Sidebar","location","structure","classes","theme","toggleDrawer","value","event","type","key","isPermanent","layoutDispatch","isSidebarOpened","setPermanent","window","addEventListener","handleWindowWidthChange","cleanup","removeEventListener","drawer","drawerOpen","drawerClose","paper","toolbar","mobileBackButton","root","headerIcon","headerIconCollapse","sidebarList","padding","map","link","id","windowWidth","innerWidth","breakpointWidth","breakpoints","values","md","isSmallScreen"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { ArrowBack as ArrowBackIcon } from \"@material-ui/icons\";\nimport { Drawer, IconButton, List } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/styles\";\nimport { withRouter } from \"react-router-dom\";\nimport classNames from \"classnames\";\n\n// styles\nimport useStyles from \"./styles\";\n\n// components\nimport SidebarLink from \"./components/SidebarLink/SidebarLink\";\n\n// context\nimport {\n  useLayoutState,\n  useLayoutDispatch,\n  toggleSidebar\n} from \"../../context/LayoutContext\";\n\nfunction Sidebar({ location, structure }) {\n  var classes = useStyles();\n  var theme = useTheme();\n\n  const toggleDrawer = value => event => {\n    if (\n      event.type === \"keydown\" &&\n      (event.key === \"Tab\" || event.key === \"Shift\")\n    ) {\n      return;\n    }\n\n    if (value && !isPermanent) toggleSidebar(layoutDispatch);\n  };\n\n  // global\n  var { isSidebarOpened } = useLayoutState();\n  var layoutDispatch = useLayoutDispatch();\n\n  // local\n  var [isPermanent, setPermanent] = useState(true);\n\n  useEffect(function() {\n    window.addEventListener(\"resize\", handleWindowWidthChange);\n    handleWindowWidthChange();\n    return function cleanup() {\n      window.removeEventListener(\"resize\", handleWindowWidthChange);\n    };\n  });\n\n  return (\n    <Drawer\n      variant={isPermanent ? \"permanent\" : \"temporary\"}\n      className={classNames(classes.drawer, {\n        [classes.drawerOpen]: !isPermanent ? !isSidebarOpened : isSidebarOpened,\n        [classes.drawerClose]: !isPermanent ? isSidebarOpened : !isSidebarOpened\n      })}\n      classes={{\n        paper: classNames({\n          [classes.drawerOpen]: !isPermanent\n            ? !isSidebarOpened\n            : isSidebarOpened,\n          [classes.drawerClose]: !isPermanent\n            ? isSidebarOpened\n            : !isSidebarOpened\n        })\n      }}\n      open={!isPermanent ? !isSidebarOpened : isSidebarOpened}\n      onClose={toggleDrawer(true)}\n    >\n      <div className={classes.toolbar} />\n      <div className={classes.mobileBackButton}>\n        <IconButton onClick={() => toggleSidebar(layoutDispatch)}>\n          <ArrowBackIcon\n            classes={{\n              root: classNames(classes.headerIcon, classes.headerIconCollapse)\n            }}\n          />\n        </IconButton>\n      </div>\n      <List\n        className={classes.sidebarList}\n        classes={{ padding: classes.padding }}\n      >\n        {structure.map(link => (\n          <SidebarLink\n            key={link.id}\n            location={location}\n            isSidebarOpened={!isPermanent ? !isSidebarOpened : isSidebarOpened}\n            {...link}\n            toggleDrawer={toggleDrawer(true)}\n          />\n        ))}\n      </List>\n    </Drawer>\n  );\n\n  // ##################################################################\n  function handleWindowWidthChange() {\n    var windowWidth = window.innerWidth;\n    var breakpointWidth = theme.breakpoints.values.md;\n    var isSmallScreen = windowWidth < breakpointWidth;\n\n    if (isSmallScreen && isPermanent) {\n      setPermanent(false);\n    } else if (!isSmallScreen && !isPermanent) {\n      setPermanent(true);\n    }\n  }\n}\n\nexport default withRouter(Sidebar);\n"]},"metadata":{},"sourceType":"module"}