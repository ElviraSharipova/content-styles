{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nrequire(\"../declarations/window\");\n/**\n * The Unity Context.\n */\n\n\nvar UnityContext =\n/** @class */\nfunction () {\n  /**\n   * Creates a new instance of the Unity context model.\n   * @param {IUnityConfig} unityConfig The Unity config used to build the player.\n   */\n  function UnityContext(unityConfig) {\n    this.unityConfig = unityConfig;\n    /**\n     * A list of the UnityEvents binded to this unityContext.\n     * @type {IUnityEvent[]}\n     */\n\n    this.unityEvents = [];\n    if (typeof window.ReactUnityWebGL === \"undefined\") window.ReactUnityWebGL = {};\n  }\n  /**\n   * Sets the reference to the UnityComponent.\n   * @param {UnityComponent} unityComponentReference the target unity component.\n   */\n\n\n  UnityContext.prototype.setComponentReference = function (unityComponentReference) {\n    this.unityComponentReference = unityComponentReference;\n  };\n  /**\n   * Sets the reference of the UnityInstance.\n   * @param {UnityInstance} unityInstance the target unityInstance.\n   */\n\n\n  UnityContext.prototype.setUnityInstance = function (unityInstance) {\n    this.unityInstance = unityInstance;\n  };\n  /**\n   * Quits the Unity Instance and clears it from memory.\n   */\n\n\n  UnityContext.prototype.quitUnityInstance = function () {\n    var _this = this;\n\n    if (typeof this.unityInstance !== \"undefined\") this.unityInstance.Quit().then(function () {\n      _this.invokeEventListener(\"quitted\");\n\n      _this.unityInstance = undefined;\n    });\n  };\n  /**\n   * Sends a message to the UnityInstance to invoke a public method.\n   * @param {string} gameObjectName the name of the game object in your Unity scene.\n   * @param {string} methodName the name of the public method on the game object.\n   * @param {string | number | boolean} parameter an optional method parameter.\n   */\n\n\n  UnityContext.prototype.send = function (gameObjectName, methodName, parameter) {\n    if (typeof this.unityInstance !== \"undefined\") if (typeof parameter === \"undefined\") this.unityInstance.SendMessage(gameObjectName, methodName);else this.unityInstance.SendMessage(gameObjectName, methodName, parameter);\n  };\n  /**\n   * Registers an event listener for the Unity player. These can be\n   * system events like when the player is initialized or loader and\n   * your custom events from Unity.\n   * @param {string} eventName the event name\n   * @param {Function} eventListener the event function\n   * @returns {any} The Function\n   */\n\n\n  UnityContext.prototype.on = function (eventName, eventListener) {\n    this.unityEvents.push({\n      eventName: eventName,\n      eventCallback: eventListener\n    });\n\n    window.ReactUnityWebGL[eventName] = function (parameter) {\n      return eventListener(parameter);\n    };\n  };\n  /**\n   * Invokes an event listener that has been registered using the on function.\n   * @param {string} eventName the event name\n   * @param {Function} eventValue the event value\n   */\n\n\n  UnityContext.prototype.invokeEventListener = function (eventName, eventValue) {\n    for (var _i = 0, _a = this.unityEvents; _i < _a.length; _i++) {\n      var _unityEvent = _a[_i];\n      if (_unityEvent.eventName === eventName) _unityEvent.eventCallback(eventValue);\n    }\n  };\n  /**\n   * Enables or disabled the fullscreen mode of the UnityInstance.\n   * @param {boolean} enabled\n   */\n\n\n  UnityContext.prototype.setFullscreen = function (enabled) {\n    if (typeof this.unityInstance !== \"undefined\") this.unityInstance.SetFullscreen(enabled === true ? 1 : 0);\n  };\n\n  return UnityContext;\n}();\n\nexports.default = UnityContext;","map":null,"metadata":{},"sourceType":"script"}