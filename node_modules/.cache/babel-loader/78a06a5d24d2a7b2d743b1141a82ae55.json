{"ast":null,"code":"import React from\"react\";import{Grid}from\"@material-ui/core\";import{withRouter}from\"react-router-dom\";//components\nimport Widget from\"../../../Widget\";import{Typography,Button}from\"../../../Wrappers\";import Code from\"../../../Code\";var Pages=function Pages(props){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Grid,{container:true,spacing:3},/*#__PURE__*/React.createElement(Grid,{item:true,xs:12},/*#__PURE__*/React.createElement(Widget,{disableWidgetMenu:true},/*#__PURE__*/React.createElement(Typography,{variant:\"h6\"},\"Auth\"),/*#__PURE__*/React.createElement(Typography,{style:{marginBottom:16}},\"User authorization is build via\",\" \",/*#__PURE__*/React.createElement(Code,{row:true,inline:true},\"React Hooks and React Router Dom\"),\" \",\"to redirect. We're using \",/*#__PURE__*/React.createElement(Code,{inline:true,row:true},\"localStorage\"),\" \",\"to keep that the user is login. When a user is coming in\",\" \",/*#__PURE__*/React.createElement(Code,{row:true,inline:true},\"token\"),\" \",\"value is recorded with the number key. You can see a logic specified in \",/*#__PURE__*/React.createElement(Code,{row:true,inline:true},\"/src/components/App.js\")),/*#__PURE__*/React.createElement(Code,null,\"\\n  function PrivateRoute({ component, ...rest }) {\\n    return (\\n      <Route\\n        {...rest}\\n        render={props =>\\n          isAuthenticated ? (\\n            React.createElement(component, props)\\n          ) : (\\n            <Redirect\\n              to={{\\n                pathname: \\\"/login\\\",\\n                state: {\\n                  from: props.location\\n                }\\n              }}\\n            />\\n          )\\n        }\\n      />\\n    );\\n  }\\n\\n  function PublicRoute({ component, ...rest }) {\\n    return (\\n      <Route\\n        {...rest}\\n        render={props =>\\n          isAuthenticated ? (\\n            <Redirect\\n              to={{\\n                pathname: \\\"/\\\"\\n              }}\\n            />\\n          ) : (\\n            React.createElement(component, props)\\n          )\\n        }\\n      />\\n    );\\n  }\\n            \"),/*#__PURE__*/React.createElement(Typography,{variant:\"h6\"},\"Dashboard\"),/*#__PURE__*/React.createElement(Typography,null,\"We have build a dynamic dashboard that visualized via\",\" \",/*#__PURE__*/React.createElement(Code,{row:true,inline:true},\"Recharts and Apexcharts\"),\". You can see a couple of tables that can help you to collect user's info, such as Support Requests, Payments, New registrations.\",\" \"),/*#__PURE__*/React.createElement(Typography,{style:{margin:\"16px 0\"}},\"You can switch between timesteps to view the info all the time.\"),/*#__PURE__*/React.createElement(Button,{variant:\"contained\",color:\"primary\",onClick:function onClick(){return props.history.push(\"/app/dashboard\");}},\"Demo\")))));};export default withRouter(Pages);","map":{"version":3,"sources":["/home/dekor/eqvium/react_material_test/admin-full/src/components/Documentation/pages/pages/Pages.js"],"names":["React","Grid","withRouter","Widget","Typography","Button","Code","Pages","props","marginBottom","margin","history","push"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,IAAT,KAAqB,mBAArB,CACA,OAASC,UAAT,KAA2B,kBAA3B,CAEA;AACA,MAAOC,CAAAA,MAAP,KAAmB,iBAAnB,CACA,OAASC,UAAT,CAAqBC,MAArB,KAAmC,mBAAnC,CACA,MAAOC,CAAAA,IAAP,KAAiB,eAAjB,CAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAAAC,KAAK,CAAI,CACrB,mBACE,qDACE,oBAAC,IAAD,EAAM,SAAS,KAAf,CAAgB,OAAO,CAAE,CAAzB,eACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,eACE,oBAAC,MAAD,EAAQ,iBAAiB,KAAzB,eACE,oBAAC,UAAD,EAAY,OAAO,CAAE,IAArB,SADF,cAEE,oBAAC,UAAD,EAAY,KAAK,CAAE,CAAEC,YAAY,CAAE,EAAhB,CAAnB,oCACkC,GADlC,cAEE,oBAAC,IAAD,EAAM,GAAG,KAAT,CAAU,MAAM,KAAhB,qCAFF,CAIU,GAJV,0CAK2B,oBAAC,IAAD,EAAM,MAAM,KAAZ,CAAa,GAAG,KAAhB,iBAL3B,CAKoE,GALpE,4DAM2D,GAN3D,cAOE,oBAAC,IAAD,EAAM,GAAG,KAAT,CAAU,MAAM,KAAhB,UAPF,CASU,GATV,yFAWe,oBAAC,IAAD,EAAM,GAAG,KAAT,CAAU,MAAM,KAAhB,2BAXf,CAFF,cAeE,oBAAC,IAAD,62BAfF,cAyDE,oBAAC,UAAD,EAAY,OAAO,CAAE,IAArB,cAzDF,cA0DE,oBAAC,UAAD,8DACwD,GADxD,cAEE,oBAAC,IAAD,EAAM,GAAG,KAAT,CAAU,MAAM,KAAhB,4BAFF,qIAOiB,GAPjB,CA1DF,cAmEE,oBAAC,UAAD,EAAY,KAAK,CAAE,CAAEC,MAAM,CAAE,QAAV,CAAnB,oEAnEF,cAsEE,oBAAC,MAAD,EACE,OAAO,CAAE,WADX,CAEE,KAAK,CAAE,SAFT,CAGE,OAAO,CAAE,yBAAMF,CAAAA,KAAK,CAACG,OAAN,CAAcC,IAAd,CAAmB,gBAAnB,CAAN,EAHX,SAtEF,CADF,CADF,CADF,CADF,CAsFD,CAvFD,CAyFA,cAAeV,CAAAA,UAAU,CAACK,KAAD,CAAzB","sourcesContent":["import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { withRouter } from \"react-router-dom\";\n\n//components\nimport Widget from \"../../../Widget\";\nimport { Typography, Button } from \"../../../Wrappers\";\nimport Code from \"../../../Code\";\n\nconst Pages = props => {\n  return (\n    <>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Widget disableWidgetMenu>\n            <Typography variant={\"h6\"}>Auth</Typography>\n            <Typography style={{ marginBottom: 16 }}>\n              User authorization is build via{\" \"}\n              <Code row inline>\n                React Hooks and React Router Dom\n              </Code>{\" \"}\n              to redirect. We're using <Code inline row>{`localStorage`}</Code>{\" \"}\n              to keep that the user is login. When a user is coming in{\" \"}\n              <Code row inline>\n                token\n              </Code>{\" \"}\n              value is recorded with the number key. You can see a logic\n              specified in <Code row inline>{`/src/components/App.js`}</Code>\n            </Typography>\n            <Code>{`\n  function PrivateRoute({ component, ...rest }) {\n    return (\n      <Route\n        {...rest}\n        render={props =>\n          isAuthenticated ? (\n            React.createElement(component, props)\n          ) : (\n            <Redirect\n              to={{\n                pathname: \"/login\",\n                state: {\n                  from: props.location\n                }\n              }}\n            />\n          )\n        }\n      />\n    );\n  }\n\n  function PublicRoute({ component, ...rest }) {\n    return (\n      <Route\n        {...rest}\n        render={props =>\n          isAuthenticated ? (\n            <Redirect\n              to={{\n                pathname: \"/\"\n              }}\n            />\n          ) : (\n            React.createElement(component, props)\n          )\n        }\n      />\n    );\n  }\n            `}</Code>\n            <Typography variant={\"h6\"}>Dashboard</Typography>\n            <Typography>\n              We have build a dynamic dashboard that visualized via{\" \"}\n              <Code row inline>\n                Recharts and Apexcharts\n              </Code>\n              . You can see a couple of tables that can help you to collect\n              user's info, such as Support Requests, Payments, New\n              registrations.{\" \"}\n            </Typography>\n            <Typography style={{ margin: \"16px 0\" }}>\n              You can switch between timesteps to view the info all the time.\n            </Typography>\n            <Button\n              variant={\"contained\"}\n              color={\"primary\"}\n              onClick={() => props.history.push(\"/app/dashboard\")}\n            >\n              Demo\n            </Button>\n          </Widget>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default withRouter(Pages);\n"]},"metadata":{},"sourceType":"module"}