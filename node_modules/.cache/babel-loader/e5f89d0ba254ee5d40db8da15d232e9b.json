{"ast":null,"code":"var _jsxFileName = \"/home/dekor/eqvium/react_material_test/admin-full/src/pages/charts/LineCharts.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/styles\";\nimport { Typography, Button } from '../../components/Wrappers';\nimport ReactApexChart from \"react-apexcharts\";\nimport ApexCharts from \"apexcharts\";\nimport ApexLineChart from \"./components/ApexLineChart\"; // components\n\nimport Widget from \"../../components/Widget/Widget\";\nexport default function Charts(props) {\n  //    const pol_series =  [14, 23, 21, 17, 15, 10, 12, 17, 21];\n  const pol_state = {\n    series: [14, 23, 21, 17, 15, 10, 12, 17, 21],\n    options: {\n      chart: {\n        type: 'polarArea'\n      },\n      stroke: {\n        colors: ['#fff']\n      },\n      fill: {\n        opacity: 0.8\n      },\n      responsive: [{\n        breakpoint: 480,\n        options: {\n          chart: {\n            width: 200\n          },\n          legend: {\n            position: 'bottom'\n          }\n        }\n      }]\n    }\n  };\n  const ws = useRef(null);\n  const [data1, updateData1] = useState([0, 0, 0, 0, 0, 0, 0]); //const [data1, updateData1] = useState([0,0,0]);\n  //const [data2, updateData2] = useState([0,0,0,0,0,0,0]);\n\n  useEffect(() => {\n    ws.current = new WebSocket(\"ws://79.143.25.41:8080/gear\");\n    ws.current.binaryType = 'arraybuffer';\n\n    ws.current.onopen = () => console.log(\"ws opened\");\n\n    ws.current.onclose = () => console.log(\"ws closed\");\n\n    return () => {\n      ws.current.close();\n    };\n  }, []);\n  useEffect(() => {\n    if (!ws.current) return;\n\n    ws.current.onmessage = e => {\n      const message = JSON.parse(e.data); ////if (!isNaN(parseInt(e.data))) {\n      ////  let array1 = [...data1, parseInt(e.data)];\n      //console.log(parseInt(e.data));\n      ////array1.shift();\n      ////updateData1(array1);\n      ////console.log(\"ws recieved: \", data1);\n      ////}\n      //console.log(\"ws recieved: \", JSON.parse(e.data));\n      //console.log(\"ws recieved: \", message[\"data\"][\"sehsor\"]);\n\n      console.log(\"ws recieved: \", message);\n    };\n  }, [data1]); // local\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Widget, {\n    title: \"Поток данных\",\n    noBodyPadding: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ApexLineChart, {\n    data: data1,\n    type: \"line\",\n    height: \"350\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 12\n    }\n  }, \"Set Stream\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ReactApexChart, {\n    options: pol_state.options,\n    series: pol_state.series,\n    type: \"polarArea\",\n    height: \"350\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/home/dekor/eqvium/react_material_test/admin-full/src/pages/charts/LineCharts.js"],"names":["React","useState","useEffect","useRef","Grid","useTheme","Typography","Button","ReactApexChart","ApexCharts","ApexLineChart","Widget","Charts","props","pol_state","series","options","chart","type","stroke","colors","fill","opacity","responsive","breakpoint","width","legend","position","ws","data1","updateData1","current","WebSocket","binaryType","onopen","console","log","onclose","close","onmessage","e","message","JSON","parse","data"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/styles\";\nimport { Typography, Button } from '../../components/Wrappers'\nimport ReactApexChart from \"react-apexcharts\";\nimport ApexCharts from \"apexcharts\";\nimport ApexLineChart from \"./components/ApexLineChart\";\n\n// components\nimport Widget from \"../../components/Widget/Widget\";\n\n\n\nexport default function Charts(props) {\n\n//    const pol_series =  [14, 23, 21, 17, 15, 10, 12, 17, 21];\nconst pol_state = {\n          \n            series: [14, 23, 21, 17, 15, 10, 12, 17, 21],\n            options: {\n              chart: {\n                type: 'polarArea',\n              },\n              stroke: {\n                colors: ['#fff']\n              },\n              fill: {\n                opacity: 0.8\n              },\n              responsive: [{\n                breakpoint: 480,\n                options: {\n                  chart: {\n                    width: 200\n                  },\n                  legend: {\n                    position: 'bottom'\n                  }\n                }\n              }]\n            },\n          \n          \n          };\n\n  const ws = useRef(null);\n  const [data1, updateData1] = useState([0,0,0,0,0,0,0]);\n  //const [data1, updateData1] = useState([0,0,0]);\n  //const [data2, updateData2] = useState([0,0,0,0,0,0,0]);\n\n  useEffect(() => {\n        ws.current = new WebSocket(\"ws://79.143.25.41:8080/gear\");\n        ws.current.binaryType = 'arraybuffer';\n        ws.current.onopen = () => console.log(\"ws opened\");\n        ws.current.onclose = () => console.log(\"ws closed\");\n\n        return () => {\n            ws.current.close();\n        };\n    }, []);\n\n    useEffect(() => {\n        if (!ws.current) return;\n\n        ws.current.onmessage = e => {\n            const message = JSON.parse(e.data);\n            ////if (!isNaN(parseInt(e.data))) {\n            ////  let array1 = [...data1, parseInt(e.data)];\n              //console.log(parseInt(e.data));\n              ////array1.shift();\n              ////updateData1(array1);\n              ////console.log(\"ws recieved: \", data1);\n            ////}\n            //console.log(\"ws recieved: \", JSON.parse(e.data));\n            //console.log(\"ws recieved: \", message[\"data\"][\"sehsor\"]);\n            console.log(\"ws recieved: \", message);\n            \n        };\n    }, [data1]);\n  \n\n  // local\n\n  return (\n    <>\n      <Grid container spacing={4}>\n        <Grid item md={6} xs={12}>\n          <Widget title={\"Поток данных\"} noBodyPadding>\n            <ApexLineChart\n              data={data1}\n              type=\"line\"\n              height=\"350\"\n            />\n          </Widget>\n        </Grid>\n        <Grid item md={6} xs={12}>\n           <Button  variant=\"contained\" color=\"secondary\" >Set Stream</Button>\n        </Grid>\n        <Grid item md={6} xs={12}>\n          <ReactApexChart options={pol_state.options} series={pol_state.series} type=\"polarArea\" height=\"350\"/>\n        </Grid>\n        <Grid item md={6} xs={12}>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\n\n"]},"metadata":{},"sourceType":"module"}