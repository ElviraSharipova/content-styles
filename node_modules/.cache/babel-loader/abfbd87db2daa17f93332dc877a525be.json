{"ast":null,"code":"var _jsxFileName = \"/home/dekor/eqvium/react_material_test/admin-full/src/pages/charts/LineCharts.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/styles\";\nimport { Typography, Button } from '../../components/Wrappers';\nimport ReactApexChart from \"react-apexcharts\";\nimport ApexCharts from \"apexcharts\"; // components\n\nimport Widget from \"../../components/Widget/Widget\"; //Realtime chart\n\nvar lastDate = 0;\nvar data = [];\nvar TICKINTERVAL = 86400000;\nlet XAXISRANGE = 777600000;\n\nlet _isMounted;\n\nfunction getDayWiseTimeSeries(baseval, count, yrange) {\n  var i = 0;\n\n  while (i < count) {\n    var x = baseval;\n    var y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n    data.push({\n      x,\n      y\n    });\n    lastDate = baseval;\n    baseval += TICKINTERVAL;\n    i++;\n  }\n}\n\nfunction intervals() {\n  if (_isMounted) {\n    window.setInterval(() => {\n      getNewSeries(lastDate, {\n        min: 10,\n        max: 90\n      });\n      ApexCharts.exec(\"realtime\", \"updateSeries\", [{\n        data: data\n      }]);\n    }, 1000);\n  }\n}\n\ngetDayWiseTimeSeries(new Date(\"11 Feb 2019 GMT\").getTime(), 10, {\n  min: 10,\n  max: 90\n});\n\nfunction getNewSeries(baseval, yrange) {\n  var newDate = baseval + TICKINTERVAL;\n  lastDate = newDate;\n\n  for (var i = 0; i < data.length - 10; i++) {\n    // IMPORTANT\n    // we reset the x and y of the data which is out of drawing area\n    // to prevent memory leaks\n    data[i].x = newDate - XAXISRANGE - TICKINTERVAL;\n    data[i].y = 0;\n  }\n\n  data.push({\n    y: Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min\n  });\n} //Zoomable Timeseries\n\n\nvar ts2 = 1484418600000;\nvar dates = [];\n\nfor (var i = 0; i < 120; i++) {\n  ts2 = ts2 + 86400000;\n  var innerArr = [ts2, Math.round(Math.random(0) * 100)];\n  dates.push(innerArr);\n}\n\nexport default function Charts(props) {\n  useEffect(() => {\n    intervals();\n    return function cleanup() {\n      _isMounted = false;\n      data = data.slice(data.length - 10, data.length);\n    };\n  });\n  const ws = useRef(null);\n  const [data1, updateData1] = useState([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n  const values = {\n    series4: [{\n      data: data1\n    }]\n  };\n  const series1 = [{\n    name: \"series1\",\n    data: data1\n  }];\n  useEffect(() => {\n    ws.current = new WebSocket(\"ws://79.143.25.41:8080/gear\");\n\n    ws.current.onopen = () => console.log(\"ws opened\");\n\n    ws.current.onclose = () => console.log(\"ws closed\");\n\n    return () => {\n      ws.current.close();\n    };\n  }, []);\n  useEffect(() => {\n    if (!ws.current) return;\n\n    ws.current.onmessage = e => {\n      //const message = JSON.parse(e.data);\n      //console.log(\"ws recieved: \", JSON.parse(e.data));\n      let array1 = [...data1, parseInt(e.data)];\n      array1.shift();\n      updateData1(array1);\n      console.log(\"ws recieved: \", data1);\n    };\n  }, [data1]);\n  const theme = useTheme();\n  const [state] = useState(values); // local\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Widget, {\n    title: \"Поток данных\",\n    noBodyPadding: true,\n    button: \"Set Stream\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ReactApexChart, {\n    options: themeOptions(theme),\n    series: series1,\n    type: \"line\",\n    height: \"350\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 1\n    }\n  }, \"Set Stream\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 6,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  })));\n} // ############################################################\n\nfunction themeOptions(theme) {\n  return {\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      curve: \"smooth\"\n    },\n    fill: {\n      colors: [theme.palette.primary.light, theme.palette.success.light]\n    },\n    colors: [theme.palette.primary.main, theme.palette.success.main],\n    yaxis: {\n      min: 0,\n      max: 25\n    },\n    chart: {\n      toolbar: {\n        show: false\n      }\n    },\n    legend: {\n      show: false\n    }\n  };\n}","map":{"version":3,"sources":["/home/dekor/eqvium/react_material_test/admin-full/src/pages/charts/LineCharts.js"],"names":["React","useState","useEffect","useRef","Grid","useTheme","Typography","Button","ReactApexChart","ApexCharts","Widget","lastDate","data","TICKINTERVAL","XAXISRANGE","_isMounted","getDayWiseTimeSeries","baseval","count","yrange","i","x","y","Math","floor","random","max","min","push","intervals","window","setInterval","getNewSeries","exec","Date","getTime","newDate","length","ts2","dates","innerArr","round","Charts","props","cleanup","slice","ws","data1","updateData1","values","series4","series1","name","current","WebSocket","onopen","console","log","onclose","close","onmessage","e","array1","parseInt","shift","theme","state","themeOptions","dataLabels","enabled","stroke","curve","fill","colors","palette","primary","light","success","main","yaxis","chart","toolbar","show","legend"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/styles\";\nimport { Typography, Button } from '../../components/Wrappers'\nimport ReactApexChart from \"react-apexcharts\";\nimport ApexCharts from \"apexcharts\";\n\n// components\nimport Widget from \"../../components/Widget/Widget\";\n\n//Realtime chart\nvar lastDate = 0;\nvar data = [];\nvar TICKINTERVAL = 86400000;\nlet XAXISRANGE = 777600000;\nlet _isMounted;\nfunction getDayWiseTimeSeries(baseval, count, yrange) {\n  var i = 0;\n  while (i < count) {\n    var x = baseval;\n    var y =\n      Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n\n    data.push({\n      x,\n      y\n    });\n    lastDate = baseval;\n    baseval += TICKINTERVAL;\n    i++;\n  }\n}\n\nfunction intervals() {\n  if (_isMounted) {\n    window.setInterval(() => {\n      getNewSeries(lastDate, {\n        min: 10,\n        max: 90\n      });\n\n      ApexCharts.exec(\"realtime\", \"updateSeries\", [\n        {\n          data: data\n        }\n      ]);\n    }, 1000);\n  }\n}\n\ngetDayWiseTimeSeries(new Date(\"11 Feb 2019 GMT\").getTime(), 10, {\n  min: 10,\n  max: 90\n});\n\nfunction getNewSeries(baseval, yrange) {\n  var newDate = baseval + TICKINTERVAL;\n  lastDate = newDate;\n\n  for (var i = 0; i < data.length - 10; i++) {\n    // IMPORTANT\n    // we reset the x and y of the data which is out of drawing area\n    // to prevent memory leaks\n    data[i].x = newDate - XAXISRANGE - TICKINTERVAL;\n    data[i].y = 0;\n  }\n\n  data.push({\n    y: Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min\n  });\n}\n\n//Zoomable Timeseries\nvar ts2 = 1484418600000;\nvar dates = [];\nfor (var i = 0; i < 120; i++) {\n  ts2 = ts2 + 86400000;\n  var innerArr = [ts2, Math.round(Math.random(0) * 100)];\n  dates.push(innerArr);\n}\n\n\n\nexport default function Charts(props) {\n  useEffect(() => {\n    intervals();\n    return function cleanup() {\n      _isMounted = false;\n      data = data.slice(data.length - 10, data.length);\n    };\n  });\n\n  const ws = useRef(null);\n  const [data1, updateData1] = useState([0,0,0,0,0,0,0,0,0,0,0,0]);\n  const values = {\n  series4: [\n    {\n      data: data1\n    }\n  ]\n}; \n\nconst series1 = [\n  {\n    name: \"series1\",\n    data: data1,\n  },\n];\n\n \n  useEffect(() => {\n        ws.current = new WebSocket(\"ws://79.143.25.41:8080/gear\");\n        ws.current.onopen = () => console.log(\"ws opened\");\n        ws.current.onclose = () => console.log(\"ws closed\");\n\n        return () => {\n            ws.current.close();\n        };\n    }, []);\n\n    useEffect(() => {\n        if (!ws.current) return;\n\n        ws.current.onmessage = e => {\n            //const message = JSON.parse(e.data);\n            //console.log(\"ws recieved: \", JSON.parse(e.data));\n            let array1 = [...data1, parseInt(e.data)];\n            array1.shift();\n            updateData1(array1);\n            console.log(\"ws recieved: \", data1);\n        };\n    }, [data1]);\n  \n  const theme = useTheme();\n  const [state] = useState(values);\n\n  // local\n\n  return (\n    <>\n      <Grid container spacing={4}>\n        <Grid item md={6} xs={12}>\n          <Widget title={\"Поток данных\"} noBodyPadding  button=\"Set Stream\">\n            <ReactApexChart\n              options={themeOptions(theme)}\n              series={series1}\n              type=\"line\"\n              height=\"350\"\n            />\n          </Widget>\n        </Grid>\n        <Grid item md={6} xs={12}>\n<Button\n                      variant=\"contained\"\n                      color=\"secondary\"\n                  >\n Set Stream\n                  </Button>\n        </Grid>\n        <Grid item md={6} xs={12}>\n        </Grid>\n        <Grid item md={6} xs={12}>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\n// ############################################################\nfunction themeOptions(theme) {\n  return {\n    dataLabels: {\n      enabled: false,\n    },\n    stroke: {\n      curve: \"smooth\",\n    },\n    fill: {\n      colors: [theme.palette.primary.light, theme.palette.success.light],\n    },\n    colors: [theme.palette.primary.main, theme.palette.success.main],\n    yaxis: {\n    min: 0,\n    max: 25,\n    },\n    chart: {\n      toolbar: {\n        show: false,\n      },\n    },\n    legend: {\n      show: false,\n    },\n  };\n}\n\n"]},"metadata":{},"sourceType":"module"}