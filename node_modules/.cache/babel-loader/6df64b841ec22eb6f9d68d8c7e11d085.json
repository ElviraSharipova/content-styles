{"ast":null,"code":"var _jsxFileName = \"/home/dekor/eqvium/react_material_test/admin-full-v2/src/pages/reset/Reset.js\";\nimport React, { useState } from \"react\";\nimport { Grid, CircularProgress, TextField as Input } from \"@material-ui/core\";\nimport { withRouter, useHistory } from \"react-router-dom\"; // styles\n\nimport useStyles from \"./styles\"; // logo\n\nimport logo from \"./logo.svg\"; // context\n\nimport { useUserDispatch, resetPassword, authError } from \"../../context/UserContext\"; //components\n\nimport { Button, Typography } from \"../../components/Wrappers\";\n\nfunction Reset(props) {\n  var classes = useStyles();\n  const history = useHistory(); // global\n\n  var userDispatch = useUserDispatch();\n  const [passwordValue, setPasswordValue] = useState(\"\");\n  const [confirmPasswordValue, setConfirmPasswordValue] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const checkPassword = () => {\n    if (!isPasswordValid()) {\n      if (!passwordValue) {\n        authError(\"Password field is empty\")(userDispatch);\n      } else {\n        authError(\"Passwords are not equal\")(userDispatch);\n      }\n\n      setTimeout(() => {\n        authError()(userDispatch);\n      }, 3 * 1000);\n    }\n  };\n\n  const isPasswordValid = () => {\n    return passwordValue && passwordValue === confirmPasswordValue;\n  };\n\n  const doReset = () => {\n    const params = new URLSearchParams(history.location.search);\n    const token = params.get('token');\n\n    if (!token) {\n      authError(\"There are no token\")(userDispatch);\n    }\n\n    if (!isPasswordValid()) {\n      checkPassword();\n    } else {\n      resetPassword(token, passwordValue, history)(userDispatch);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.logotypeContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logo,\n    alt: \"logo\",\n    className: classes.logotypeImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    className: classes.logotypeText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, \"Material Admin\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.customFormContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"password\",\n    InputProps: {\n      classes: {\n        underline: classes.InputUnderline,\n        input: classes.Input\n      }\n    },\n    value: passwordValue,\n    onChange: e => setPasswordValue(e.target.value),\n    margin: \"normal\",\n    placeholder: \"password\",\n    type: \"password\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"confirmPassword\",\n    InputProps: {\n      classes: {\n        underline: classes.InputUnderline,\n        input: classes.Input\n      }\n    },\n    value: confirmPasswordValue,\n    onChange: e => setConfirmPasswordValue(e.target.value),\n    margin: \"normal\",\n    placeholder: \"Confirm Password\",\n    type: \"password\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.formButtons,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(CircularProgress, {\n    size: 26,\n    className: classes.loginLoader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(Button, {\n    disabled: passwordValue.length === 0 || confirmPasswordValue.length === 0 || passwordValue !== confirmPasswordValue,\n    onClick: () => doReset(),\n    variant: \"contained\",\n    color: \"primary\",\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 15\n    }\n  }, \"reset password\"), /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    size: \"large\",\n    onClick: () => history.push('/login'),\n    className: classes.forgetButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, \"Back to login\"))), /*#__PURE__*/React.createElement(Typography, {\n    color: \"primary\",\n    className: classes.copyright,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, \"\\xA9 2014-2020 Flatlogic, LLC. All rights reserved.\")));\n}\n\nexport default withRouter(Reset);","map":{"version":3,"sources":["/home/dekor/eqvium/react_material_test/admin-full-v2/src/pages/reset/Reset.js"],"names":["React","useState","Grid","CircularProgress","TextField","Input","withRouter","useHistory","useStyles","useUserDispatch","resetPassword","authError","Button","Typography","Reset","props","classes","history","userDispatch","passwordValue","setPasswordValue","confirmPasswordValue","setConfirmPasswordValue","isLoading","setIsLoading","checkPassword","isPasswordValid","setTimeout","doReset","params","URLSearchParams","location","search","token","get","container","logotypeContainer","logo","logotypeImage","logotypeText","customFormContainer","form","underline","InputUnderline","input","e","target","value","formButtons","loginLoader","length","push","forgetButton","copyright"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Grid,\n  CircularProgress,\n  TextField as Input\n} from \"@material-ui/core\";\nimport { withRouter, useHistory } from \"react-router-dom\";\n\n// styles\nimport useStyles from \"./styles\";\n\n// logo\nimport logo from \"./logo.svg\";\n\n// context\nimport { useUserDispatch, resetPassword, authError } from \"../../context/UserContext\";\n\n//components\nimport { Button, Typography } from \"../../components/Wrappers\";\n\nfunction Reset(props) {\n  var classes = useStyles();\n  const history = useHistory();\n  // global\n  var userDispatch = useUserDispatch();\n  const [passwordValue, setPasswordValue] = useState(\"\");\n  const [confirmPasswordValue, setConfirmPasswordValue] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n    const checkPassword = () => {\n    if (!isPasswordValid()) {\n      if (!passwordValue) {\n        authError(\"Password field is empty\")(userDispatch);\n      } else {\n        authError(\"Passwords are not equal\")(userDispatch);\n      }\n      setTimeout(() => {\n        authError()(userDispatch);\n      }, 3 * 1000)\n    }\n    }\n\n    const isPasswordValid = () => {\n      return passwordValue && passwordValue === confirmPasswordValue;\n    }\n\n  const doReset = () => {\n\n    const params = new URLSearchParams(history.location.search);\n    const token = params.get('token');\n    if (!token) {\n      authError(\"There are no token\")(userDispatch)\n    }\n\n    if (!isPasswordValid()) {\n      checkPassword();\n    } else {\n      resetPassword(token, passwordValue, history)(userDispatch);\n    }\n  }\n\n\n  return (\n    <Grid container className={classes.container}>\n      <div className={classes.logotypeContainer}>\n        <img src={logo} alt=\"logo\" className={classes.logotypeImage} />\n        <Typography className={classes.logotypeText}>Material Admin</Typography>\n      </div>\n      <div className={classes.customFormContainer}>\n        <div className={classes.form}>\n        <Input\n            id=\"password\"\n            InputProps={{\n              classes: {\n                underline: classes.InputUnderline,\n                input: classes.Input\n              }\n            }}\n            value={passwordValue}\n            onChange={e => setPasswordValue(e.target.value)}\n            margin=\"normal\"\n            placeholder=\"password\"\n            type=\"password\"\n            fullWidth\n          />\n          <Input\n            id=\"confirmPassword\"\n            InputProps={{\n              classes: {\n                underline: classes.InputUnderline,\n                input: classes.Input\n              }\n            }}\n            value={confirmPasswordValue}\n            onChange={e => setConfirmPasswordValue(e.target.value)}\n            margin=\"normal\"\n            placeholder=\"Confirm Password\"\n            type=\"password\"\n            fullWidth\n          />\n          <div className={classes.formButtons}>\n            {isLoading ? (\n              <CircularProgress size={26} className={classes.loginLoader} />\n            ) : (\n              <Button\n                disabled={\n                  (passwordValue.length === 0 || confirmPasswordValue.length === 0) || (passwordValue !== confirmPasswordValue)\n                }\n                onClick={() => doReset()}\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n              >\n                reset password\n              </Button>\n            )}\n            <Button\n              color=\"primary\"\n              size=\"large\"\n              onClick={() => history.push('/login')}\n              className={classes.forgetButton}\n            >\n              Back to login\n            </Button>\n          </div>\n        </div>\n        <Typography color=\"primary\" className={classes.copyright}>\n          © 2014-2020 Flatlogic, LLC. All rights reserved.\n        </Typography>\n      </div>\n    </Grid>\n  );\n}\n\nexport default withRouter(Reset);\n"]},"metadata":{},"sourceType":"module"}